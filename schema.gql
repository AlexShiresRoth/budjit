# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type PlaidAccountTypeDef {
  _id: String!
  accessToken: String!
  accountName: String!
}

type AccountTypeDef {
  _id: String!
  name: String!
  email: String!
  password: String!
  profile: String
  plaidAccounts: [PlaidAccountTypeDef!]!
}

type GroupTypeDef {
  members: [String!]!
  invites: [String!]!
  occasionRef: String!
  name: String!
  creator: String!
}

type HistoryTypeDef {
  date: Date!
  paymentAmount: String!
  contributor: AccountTypeDef!
  paymentMethod: String!
}

"""Date custom scalar type"""
scalar Date

type OccasionTypeDef {
  title: String!
  budget: String!
  group: GroupTypeDef
  history: [HistoryTypeDef!]
  creator: String!
  initialBudget: String!
}

type InvitesTypeDef {
  _id: String!
  sender: String!
  receiver: String!
  status: String!
  inviteDate: Date!
  groupRef: String!
  occasionRef: OccasionTypeDef!
  inviteType: String!
}

type CreateAccountResponse {
  Account: AccountTypeDef!
  token: String!
}

type LoginResponse {
  Account: AccountTypeDef!
  token: String!
}

type LoadPlaidAccountsResponse {
  accounts: [PlaidAccountTypeDef!]!
  message: String!
  success: Boolean!
}

type RetrievePlaidAuthTokenResponse {
  message: String!
  success: Boolean!
  token: String!
}

type RetrievePlaidPublicTokenResponse {
  message: String!
  success: Boolean!
  account: AccountTypeDef!
}

type PlaidItem {
  institution_id: String!
}

type LoadPlaidAccountDataResponse {
  message: String!
  success: Boolean!
  accounts: [PlaidAccountConnection!]!
  item: PlaidItem!
}

type AccountBalance {
  available: Float
  current: Float
  iso_currency_code: String
  limit: Float
  unofficial_currency_code: String
}

type PlaidAccountConnection {
  account_id: String
  balances: AccountBalance
  mask: String
  name: String
  official_name: String
  subtype: String
  type: String
  item: PlaidItem!
}

type GetPlaidInstitutionResponse {
  message: String!
  success: Boolean!
  logo: String!
}

type Transaction {
  name: String!
  date: String!
  amount: Float!
  transaction_id: String!
}

type Transactions {
  account_id: String!
  transactions: [Transaction!]!
}

type GetPlaidTransactionsResponse {
  message: String!
  success: Boolean!
  spending: Float!
  id: String!
  startDate: String!
  endDate: String!
  account_transactions: Transactions!
}

type CreateInvitesResponse {
  message: String!
  success: Boolean!
  sentInvites: [InvitesTypeDef!]!
}

type LoadSentInvitesResponse {
  message: String!
  success: Boolean!
  sentInvites: [InvitesTypeDef!]!
}

type LoadReceivedInvitesResponse {
  message: String!
  success: Boolean!
  receivedInvites: [InvitesTypeDef!]!
}

type LoadGroupInvitesResponse {
  message: String!
  success: Boolean!
  groupInvites: [InvitesTypeDef!]!
}

type DeleteSentInviteResponse {
  message: String!
  success: Boolean!
  invites: [String!]!
}

type LoadGroupResponse {
  message: String!
  success: Boolean!
  Group: GroupTypeDef!
}

type ProfileTypeDef {
  name: String!
  phone: String!
  avatar: String!
}

type FindProfileByEmailResponse {
  message: String!
  success: Boolean!
  profile: ProfileTypeDef
  defaultAvatar: String!
}

type SetTimeFrameResponse {
  message: String!
  success: Boolean!
  startDate: String!
  endDate: String!
}

type TransactionType {
  name: String!
  category: String!
  amount: Float!
  date: String!
  accountType: String
  location: String!
  _id: String!
  account_id: String!
}

type CreateTransactionResponse {
  message: String!
  success: Boolean!
  Transaction: TransactionType!
}

type GetAllTransactionsResponse {
  transactions: [TransactionType!]!
  message: String!
  success: Boolean!
}

type DeleteTransactionResponse {
  message: String!
  success: Boolean!
}

type LoadOccasionResponse {
  Occasion: OccasionTypeDef!
}

type LoadMyOccasionsResponse {
  message: String!
  success: Boolean!
  Occasions: [OccasionTypeDef!]!
}

type Query {
  account(id: String!): AccountTypeDef!
  findMyAccount: AccountTypeDef!
  loadPlaidAccounts: LoadPlaidAccountsResponse!
  loadPlaidData(input: LoadPlaidAccountDataInput!): LoadPlaidAccountDataResponse!
  getPlaidInstitution(input: GetPlaidInstitutionInput!): GetPlaidInstitutionResponse!
  loadMyInvites: LoadReceivedInvitesResponse!
  loadSentInvites: LoadSentInvitesResponse!
  loadSentGroupInvites: LoadGroupInvitesResponse!
  loadReceivedGroupInvites: LoadGroupInvitesResponse!
  loadMyProfile: ProfileTypeDef!
  findProfileByEmail(input: FindProfileByEmailInput!): FindProfileByEmailResponse!
  getAllManualTransactions: GetAllTransactionsResponse!
  loadGroup(input: LoadGroupInput!): LoadGroupResponse!
  loadOccasion(id: String!): LoadOccasionResponse!
  loadMyOccasions: LoadMyOccasionsResponse!
}

input LoadPlaidAccountDataInput {
  accessToken: String!
}

input GetPlaidInstitutionInput {
  institution_id: String!
  country_code: String!
}

input FindProfileByEmailInput {
  email: String!
}

input LoadGroupInput {
  groupID: String!
}

type Mutation {
  getPlaidTransactions(input: GetPlaidTransactionsInput!): GetPlaidTransactionsResponse!
  retrievePlaidAuthToken: RetrievePlaidAuthTokenResponse!
  authenticate(loginInput: LoginInput!): LoginResponse!
  createAccount(createAccountInput: CreateAccountInput!): CreateAccountResponse!
  publicTokenExchange(input: ExchangePublicTokenInput!): RetrievePlaidPublicTokenResponse!
  sendInvitesToNewGroup(sendInvitesInput: SendInvitesToNewGroupInput!): CreateInvitesResponse!
  updateInviteStatus(updateInviteStatusInput: UpdateInviteStatusInput!): InvitesTypeDef!
  deleteSentInvite(input: DeleteSentInviteInput!): DeleteSentInviteResponse!
  create(createProfileInput: ProfileInput!): ProfileTypeDef!
  update(updateProfileInput: UpdateProfileInput!): ProfileTypeDef!
  setTimeFrame(input: SetTimeFrameInput!): SetTimeFrameResponse!
  createTransaction(input: CreateTransactionInput!): CreateTransactionResponse!
  editTransaction(input: EditTransactionInput!): CreateTransactionResponse!
  deleteTransaction(input: DeleteTransactionInput!): DeleteTransactionResponse!
  createOccasion(createOccsionInput: CreateOccasionInput!): OccasionTypeDef!
  contributeToBudget(contributeToBudgetInput: ContributeToBudgetInput!): OccasionTypeDef!
}

input GetPlaidTransactionsInput {
  accessToken: String!
  startDate: String!
  endDate: String!
}

input LoginInput {
  email: String!
  password: String!
}

input CreateAccountInput {
  name: String!
  email: String!
  password: String!
  passwordConfirm: String!
}

input ExchangePublicTokenInput {
  publicToken: String!
  userId: String
  institutionName: String!
}

input SendInvitesToNewGroupInput {
  groupName: String!
  invites: [String!]!
}

input UpdateInviteStatusInput {
  status: String!
  id: String!
}

input DeleteSentInviteInput {
  invite_id: String!
  receiver_email: String!
}

input ProfileInput {
  name: String
  avatar: String
}

input UpdateProfileInput {
  name: String
  avatar: String
  profileId: String!
}

input SetTimeFrameInput {
  filter: String!
}

input CreateTransactionInput {
  name: String!
  category: String!
  amount: Float!
  date: String!
  accountType: String
  location: String!
}

input EditTransactionInput {
  name: String!
  category: String!
  amount: Float!
  date: String!
  accountType: String
  location: String!
  _id: String!
}

input DeleteTransactionInput {
  _id: String!
}

input CreateOccasionInput {
  title: String!
  budget: String!
  occasionStartDate: String!
}

input ContributeToBudgetInput {
  paymentAmount: String!
  paymentMethod: String
  date: Date
  occasionID: String!
}
